{"version":3,"file":"bundle.js","mappings":"mBAGiB,ICHV,MAEL,GACA,GACA,GACA,GACA,GACA,GACA,IAAY,EACZ,IAAa,EAEbA,cACEC,MAAK,IACLA,MAAK,GACP,CAEA,KACEA,MAAK,EAAeC,SAASC,eAAe,aAC5CF,MAAK,EAAYA,MAAK,EAAaG,cAAc,WACjDH,MAAK,EAAgBA,MAAK,EAAaG,cAAc,SACrDH,MAAK,EAAcA,MAAK,EAAaG,cAAc,aACnDH,MAAK,EAAgBA,MAAK,EAAaG,cAAc,gBACrDH,MAAK,EAAWA,MAAK,EAAcG,cAAc,SACnD,CAEA,KACEH,MAAK,EAAUI,iBAAiB,SAAUJ,MAAK,GAC/CA,MAAK,EAAcI,iBAAiB,SAAUJ,MAAK,GAEnDC,SAASG,iBAAiB,UAAWJ,MAAK,EAAWK,KAAKL,OAE1DC,SAASG,iBAAiB,QAASJ,MAAK,EAASK,KAAKL,OACtDA,MAAK,EAASI,iBAAiB,QAASJ,MAAK,GAC7CA,MAAK,EAAYI,iBACf,YACAJ,MAAK,EAAaK,KAAKL,OAEzBC,SAASG,iBAAiB,UAAWJ,MAAK,EAAWK,KAAKL,MAC5D,CAEA,GAAWM,GACT,MAAMC,EAAQD,EAAME,OAAOC,QAAQ,WAE7BC,IAAaH,GAAOI,UAAUC,SAAS,UACvCC,EAAMN,GAAOO,QAAQD,IACvBH,GAAcG,GAAe,UAARA,GAA2B,cAARA,IAC1Cb,MAAK,EAASe,OAASF,GAErBH,GAAoB,UAARG,IACdb,MAAK,EAASe,OAAS,KAErBL,GAAoB,cAARG,IACdb,MAAK,EAASe,MAAQf,MAAK,EAASe,MAAMC,MAAM,GAAI,IAEtDhB,MAAK,EAAYG,cAAc,YAAYQ,UAAUM,OAAO,SAC9D,CAEA,GAAaX,GACPN,MAAK,IACTA,MAAK,GAAa,EAClBM,EAAME,OAAOC,QAAQ,YAAYE,UAAUO,IAAI,UACjD,CAEA,GAAeZ,GACbL,SAASkB,gBAAgBC,aACvB,QACAd,EAAME,OAAOa,QAAU,YAAc,GAEzC,CAEA,GAAcf,GACZgB,QAAQC,IAAIjB,EAAME,OAAOO,OACzBd,SAASuB,KAAKC,MAAMC,WAAapB,EAAME,OAAOO,KAChD,CAEA,GAAST,GACPA,EAAME,OAAOO,MAAQT,EAAME,OAAOO,MAAMY,QAAQ,gBAAiB,GACnE,CAEA,GAAWrB,GACLN,MAAK,IACTA,MAAK,GAAY,EACjBsB,QAAQC,IAAIjB,EAAMsB,MAClB5B,MAAK,EAAS6B,QACd7B,MAAK,EAAcW,UAAUmB,OAC3B,QACA,gBAAgBC,KAAKzB,EAAM0B,MAG7BhC,MAAK,EACFG,cAAc,cAAcG,EAAMsB,UACjCjB,UAAUO,IAAI,UACpB,CAEA,GAASZ,GACPN,MAAK,EACFG,cAAc,cAAcG,EAAMsB,UACjCjB,UAAUM,OAAO,SACvB,E","sources":["webpack://01-virtual-keyboard/./src/js/index.js","webpack://01-virtual-keyboard/./src/js/Keyboard.js"],"sourcesContent":["import '../css/style.css';\nimport { Keyboard } from './Keyboard';\n\nconst keyboard = new Keyboard(); // const안에 써줘서 할당\n","export class Keyboard {\n  // *privite method면 #을 붙인다\n  #switchEl; // private class field 이 클래스는 프라이빗 처리됨\n  #fontSelectEl; // private class field 이 클래스는 프라이빗 처리됨\n  #containerEl;\n  #keyboardEl;\n  #inputGroupEl;\n  #inputEl;\n  #keyPress = false;\n  #mouseDown = false;\n\n  constructor() {\n    this.#assignElement();\n    this.#addEvent();\n  }\n\n  #assignElement() {\n    this.#containerEl = document.getElementById('container');\n    this.#switchEl = this.#containerEl.querySelector('#switch');\n    this.#fontSelectEl = this.#containerEl.querySelector('#font');\n    this.#keyboardEl = this.#containerEl.querySelector('#keyboard');\n    this.#inputGroupEl = this.#containerEl.querySelector('#input-group');\n    this.#inputEl = this.#inputGroupEl.querySelector('#input');\n  }\n\n  #addEvent() {\n    this.#switchEl.addEventListener('change', this.#onChangeTheme);\n    this.#fontSelectEl.addEventListener('change', this.#onChangeFont);\n    // bind: this가 전역객체를 바라보는 것 방지,  class의 this를 바라보게\n    document.addEventListener('keydown', this.#onKeyDown.bind(this));\n    // bind: this가 전역객체를 바라보는 것 방지,  class의 this를 바라보게\n    document.addEventListener('keyup', this.#onKeyUp.bind(this));\n    this.#inputEl.addEventListener('input', this.#onInput);\n    this.#keyboardEl.addEventListener(\n      'mousedown',\n      this.#onMouseDown.bind(this) // this를 사용할 경우 bind 처리ㄴ\n    );\n    document.addEventListener('mouseup', this.#onMouseUp.bind(this));\n  }\n\n  #onMouseUp(event) {\n    const keyEl = event.target.closest('div.key');\n    // !undefined -> true , !!undefined -> false 확실한 타입캐스팅\n    const isActive = !!keyEl?.classList.contains('active');\n    const val = keyEl?.dataset.val; // data-val을 dataset으로 불러올 수 있음\n    if (isActive && !!val && val !== 'Space' && val !== 'Backspace') {\n      this.#inputEl.value += val;\n    }\n    if (isActive && val === 'Space') {\n      this.#inputEl.value += ' ';\n    }\n    if (isActive && val === 'Backspace') {\n      this.#inputEl.value = this.#inputEl.value.slice(0, -1);\n    }\n    this.#keyboardEl.querySelector('.active')?.classList.remove('active');\n  }\n\n  #onMouseDown(event) {\n    if (this.#keyPress) return;\n    this.#mouseDown = true;\n    event.target.closest('div.key')?.classList.add('active');\n  }\n\n  #onChangeTheme(event) {\n    document.documentElement.setAttribute(\n      'theme',\n      event.target.checked ? 'dark-mode' : ''\n    );\n  }\n\n  #onChangeFont(event) {\n    console.log(event.target.value);\n    document.body.style.fontFamily = event.target.value;\n  }\n\n  #onInput(event) {\n    event.target.value = event.target.value.replace(/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/, '');\n  }\n\n  #onKeyDown(event) {\n    if (this.#mouseDown) return;\n    this.#keyPress = true;\n    console.log(event.code);\n    this.#inputEl.focus();\n    this.#inputGroupEl.classList.toggle(\n      'error',\n      /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/.test(event.key)\n    );\n\n    this.#keyboardEl\n      .querySelector(`[data-code=${event.code}]`)\n      ?.classList.add('active');\n  }\n\n  #onKeyUp(event) {\n    this.#keyboardEl\n      .querySelector(`[data-code=${event.code}]`)\n      ?.classList.remove('active');\n  }\n}\n"],"names":["constructor","this","document","getElementById","querySelector","addEventListener","bind","event","keyEl","target","closest","isActive","classList","contains","val","dataset","value","slice","remove","add","documentElement","setAttribute","checked","console","log","body","style","fontFamily","replace","code","focus","toggle","test","key"],"sourceRoot":""}